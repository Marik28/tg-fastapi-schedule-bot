import traceback

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.exceptions import MessageIsTooLong
from aiohttp import ClientConnectorError
from loguru import logger

from ..exceptions import ServerError
from ..services.groups import get_groups_to_choose
from ..states import ChooseGroup

logger.add("../logs.log", level="INFO", rotation="2 MB", compression="zip")


def catch_error(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ—Ç –ª–æ–≥"""

    async def wrapper(message: types.Message, state: FSMContext, *args, **kwargs):
        logger.debug(f"{message.text}, {message.from_user}")
        msg = None
        try:
            await func(message, state)
        except ClientConnectorError:
            msg = "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"

            logger.error(f"Message: {message.text}, user: {message.from_user}, error: {traceback.format_exc()}")
        except ServerError:
            msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞"
            logger.error(f"Message: {message.text}, user: {message.from_user}, error: {traceback.format_exc()}")

        except MessageIsTooLong:
            msg = "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –•–∑, —á—Ç–æ –¥–µ–ª–∞—Ç—å ü§î"
            logger.error(f"Message: {message.text}, user: {message.from_user}, error: {traceback.format_exc()}")

        except Exception:
            msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
            logger.error(f"Message: {message.text}, user: {message.from_user}, error: {traceback.format_exc()}")
        finally:
            if msg is not None:
                await message.answer(msg, reply_markup=ReplyKeyboardRemove())
                await state.reset_state(with_data=False)

    return wrapper


def group_chosen_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ –≥—Ä—É–ø–ø–µ –∏ –ø–æ–¥–≥—Ä—É–ø–ø–µ
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∏—Ö.
    """

    async def wrapper(message: types.Message, state: FSMContext, *args, **kwargs):
        user_data = await state.get_data()
        group = user_data.get("group")
        subgroup = user_data.get("subgroup")
        if group is None or subgroup is None:
            group_list_keyboard = await get_groups_to_choose()
            await ChooseGroup.waiting_for_group.set()
            await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–≥—Ä—É–ø–ø—É", reply_markup=group_list_keyboard)
        else:
            await func(message, state)

    return wrapper
